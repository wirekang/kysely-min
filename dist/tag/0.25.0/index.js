import{f as e,I as t,S as i,C as r,i as s,V as n,p as o,a,R as d,b as p,c as l,n as c,O as u,d as h,e as m,Q as y,g,h as w,j as f,k as v,W as C,D as x,l as b,m as B,o as D,q as A,r as E,s as I,t as k,u as O,v as S,w as q,x as M,y as W,z as L,A as Q,B as R,E as V,F,G as K,H as j,J,K as z,L as G,M as H}from"./sql-iOz-TslO.js";export{aC as ARITHMETIC_OPERATORS,ab as AggregateFunctionBuilder,a$ as AggregateFunctionNode,al as AliasNode,ac as AliasedAggregateFunctionBuilder,Y as AliasedExpressionWrapper,ai as AliasedRawBuilder,_ as AliasedSelectQueryBuilder,am as AndNode,aD as BINARY_OPERATORS,b3 as BinaryOperationNode,aB as COMPARISON_OPERATORS,af as CaseEndBuilder,ad as CaseThenBuilder,ae as CaseWhenBuilder,an as ColumnUpdateNode,ap as CommonTableExpressionNameNode,ao as CommonTableExpressionNode,a_ as DefaultInsertValueNode,a1 as DeleteQueryBuilder,aq as DeleteQueryNode,a6 as DeleteResult,aZ as ExplainNode,X as ExpressionWrapper,ar as FromNode,as as GroupByItemNode,at as GroupByNode,au as HavingNode,$ as InsertQueryBuilder,a5 as InsertResult,a4 as JoinBuilder,av as JoinNode,aw as LimitNode,ak as NOOP_QUERY_EXECUTOR,a2 as NoResultError,aj as NoopQueryExecutor,aG as OPERATORS,ax as OffsetNode,a8 as OnConflictBuilder,a9 as OnConflictDoNothingBuilder,ay as OnConflictNode,aa as OnConflictUpdateBuilder,az as OnDuplicateKeyNode,aA as OnNode,aL as OrNode,aM as OrderByItemNode,aN as OrderByNode,b0 as OverNode,aO as ParensNode,b2 as PartitionByItemNode,b1 as PartitionByNode,aP as PrimitiveValueListNode,ag as RawBuilder,aQ as ReturningNode,Z as SelectQueryBuilder,aR as SelectQueryNode,aS as SelectionNode,aT as TableNode,aE as UNARY_FILTER_OPERATORS,aF as UNARY_OPERATORS,b4 as UnaryOperationNode,a0 as UpdateQueryBuilder,aU as UpdateQueryNode,a7 as UpdateResult,b5 as UsingNode,aV as ValuesNode,aW as WhenNode,aX as WhereNode,aY as WithNode,N as expressionBuilder,U as isAliasedExpression,aK as isArithmeticOperator,aI as isBinaryOperator,aJ as isComparisonOperator,T as isExpression,a3 as isNoResultErrorConstructor,aH as isOperator,ah as isRawBuilder,P as logOnce}from"./sql-iOz-TslO.js";const ee=e({is:e=>"AlterTableNode"===e.kind,create:t=>e({kind:"AlterTableNode",table:t}),cloneWithTableProps:(t,i)=>e({...t,...i}),cloneWithColumnAlteration:(t,i)=>e({...t,columnAlterations:t.columnAlterations?[...t.columnAlterations,i]:[i]})}),te=e({is:e=>"CreateIndexNode"===e.kind,create:i=>e({kind:"CreateIndexNode",name:t.create(i)}),cloneWith:(t,i)=>e({...t,...i}),cloneWithColumns:(t,i)=>e({...t,columns:[...t.columns||[],...i]})}),ie=e({is:e=>"CreateSchemaNode"===e.kind,create:(i,r)=>e({kind:"CreateSchemaNode",schema:t.create(i),...r}),cloneWith:(t,i)=>e({...t,...i})}),re=["preserve rows","delete rows","drop"],se=e({is:e=>"CreateTableNode"===e.kind,create:t=>e({kind:"CreateTableNode",table:t,columns:e([])}),cloneWithColumn:(t,i)=>e({...t,columns:e([...t.columns,i])}),cloneWithConstraint:(t,i)=>e({...t,constraints:t.constraints?e([...t.constraints,i]):e([i])}),cloneWithFrontModifier:(t,i)=>e({...t,frontModifiers:t.frontModifiers?e([...t.frontModifiers,i]):e([i])}),cloneWithEndModifier:(t,i)=>e({...t,endModifiers:t.endModifiers?e([...t.endModifiers,i]):e([i])}),cloneWith:(t,i)=>e({...t,...i})}),ne=e({is:e=>"DropIndexNode"===e.kind,create:(t,r)=>e({kind:"DropIndexNode",name:i.create(t),...r}),cloneWith:(t,i)=>e({...t,...i})}),oe=e({is:e=>"DropSchemaNode"===e.kind,create:(i,r)=>e({kind:"DropSchemaNode",schema:t.create(i),...r}),cloneWith:(t,i)=>e({...t,...i})}),de=e({is:e=>"DropTableNode"===e.kind,create:(t,i)=>e({kind:"DropTableNode",table:t,...i}),cloneWith:(t,i)=>e({...t,...i})}),pe=e({is:e=>"AddColumnNode"===e.kind,create:t=>e({kind:"AddColumnNode",column:t})}),le=e({is:e=>"AlterColumnNode"===e.kind,create:t=>e({kind:"AlterColumnNode",column:r.create(t)}),cloneWith:(t,i)=>e({...t,...i})}),ce=e({is:e=>"ColumnDefinitionNode"===e.kind,create:(t,i)=>e({kind:"ColumnDefinitionNode",column:r.create(t),dataType:i}),cloneWithFrontModifier:(t,i)=>e({...t,frontModifiers:t.frontModifiers?e([...t.frontModifiers,i]):[i]}),cloneWithEndModifier:(t,i)=>e({...t,endModifiers:t.endModifiers?e([...t.endModifiers,i]):[i]}),cloneWith:(t,i)=>e({...t,...i})}),ue=e({is:e=>"DropColumnNode"===e.kind,create:t=>e({kind:"DropColumnNode",column:r.create(t)})}),he=e({is:e=>"RenameColumnNode"===e.kind,create:(t,i)=>e({kind:"RenameColumnNode",column:r.create(t),renameTo:r.create(i)})}),me=e({is:e=>"CheckConstraintNode"===e.kind,create:(i,r)=>e({kind:"CheckConstraintNode",expression:i,name:r?t.create(r):void 0})}),ye=["no action","restrict","cascade","set null","set default"],ge=e({is:e=>"ReferencesNode"===e.kind,create:(t,i)=>e({kind:"ReferencesNode",table:t,columns:e([...i])}),cloneWithOnDelete:(t,i)=>e({...t,onDelete:i}),cloneWithOnUpdate:(t,i)=>e({...t,onUpdate:i})});function parseDefaultValueExpression(e){return s(e)?e.toOperationNode():n.createImmediate(e)}const we=e({is:e=>"GeneratedNode"===e.kind,create:t=>e({kind:"GeneratedNode",...t}),createWithExpression:t=>e({kind:"GeneratedNode",always:!0,expression:t}),cloneWith:(t,i)=>e({...t,...i})}),fe=e({is:e=>"DefaultValueNode"===e.kind,create:t=>e({kind:"DefaultValueNode",defaultValue:t})});function parseOnModifyForeignAction(e){if(ye.includes(e))return e;throw new Error(`invalid OnModifyForeignAction ${e}`)}class ColumnDefinitionBuilder{#e;constructor(e){this.#e=e}autoIncrement(){return new ColumnDefinitionBuilder(ce.cloneWith(this.#e,{autoIncrement:!0}))}primaryKey(){return new ColumnDefinitionBuilder(ce.cloneWith(this.#e,{primaryKey:!0}))}references(e){const t=a(e);if(!d.is(t)||p.is(t.column))throw new Error(`invalid call references('${e}'). The reference must have format table.column or schema.table.column`);return new ColumnDefinitionBuilder(ce.cloneWith(this.#e,{references:ge.create(t.table,[t.column])}))}onDelete(e){if(!this.#e.references)throw new Error("on delete constraint can only be added for foreign keys");return new ColumnDefinitionBuilder(ce.cloneWith(this.#e,{references:ge.cloneWithOnDelete(this.#e.references,parseOnModifyForeignAction(e))}))}onUpdate(e){if(!this.#e.references)throw new Error("on update constraint can only be added for foreign keys");return new ColumnDefinitionBuilder(ce.cloneWith(this.#e,{references:ge.cloneWithOnUpdate(this.#e.references,parseOnModifyForeignAction(e))}))}unique(){return new ColumnDefinitionBuilder(ce.cloneWith(this.#e,{unique:!0}))}notNull(){return new ColumnDefinitionBuilder(ce.cloneWith(this.#e,{notNull:!0}))}unsigned(){return new ColumnDefinitionBuilder(ce.cloneWith(this.#e,{unsigned:!0}))}defaultTo(e){return new ColumnDefinitionBuilder(ce.cloneWith(this.#e,{defaultTo:fe.create(parseDefaultValueExpression(e))}))}check(e){return new ColumnDefinitionBuilder(ce.cloneWith(this.#e,{check:me.create(e.toOperationNode())}))}generatedAlwaysAs(e){return new ColumnDefinitionBuilder(ce.cloneWith(this.#e,{generated:we.createWithExpression(e.toOperationNode())}))}generatedAlwaysAsIdentity(){return new ColumnDefinitionBuilder(ce.cloneWith(this.#e,{generated:we.create({identity:!0,always:!0})}))}generatedByDefaultAsIdentity(){return new ColumnDefinitionBuilder(ce.cloneWith(this.#e,{generated:we.create({identity:!0,byDefault:!0})}))}stored(){if(!this.#e.generated)throw new Error("stored() can only be called after generatedAlwaysAs");return new ColumnDefinitionBuilder(ce.cloneWith(this.#e,{generated:we.cloneWith(this.#e.generated,{stored:!0})}))}modifyFront(e){return new ColumnDefinitionBuilder(ce.cloneWithFrontModifier(this.#e,e.toOperationNode()))}modifyEnd(e){return new ColumnDefinitionBuilder(ce.cloneWithEndModifier(this.#e,e.toOperationNode()))}$call(e){return e(this)}toOperationNode(){return this.#e}}o(ColumnDefinitionBuilder,"don't await ColumnDefinitionBuilder instances directly.");const Ne=e({is:e=>"ModifyColumnNode"===e.kind,create:t=>e({kind:"ModifyColumnNode",column:t})}),ve=e({is:e=>"DataTypeNode"===e.kind,create:t=>e({kind:"DataTypeNode",dataType:t})});function parseDataTypeExpression(e){return s(e)?e.toOperationNode():ve.create(e)}const Ce=e({is:e=>"ForeignKeyConstraintNode"===e.kind,create:(i,r,s,n)=>e({kind:"ForeignKeyConstraintNode",columns:i,references:ge.create(r,s),name:n?t.create(n):void 0}),cloneWith:(t,i)=>e({...t,...i})});class ForeignKeyConstraintBuilder{#e;constructor(e){this.#e=e}onDelete(e){return new ForeignKeyConstraintBuilder(Ce.cloneWith(this.#e,{onDelete:parseOnModifyForeignAction(e)}))}onUpdate(e){return new ForeignKeyConstraintBuilder(Ce.cloneWith(this.#e,{onUpdate:parseOnModifyForeignAction(e)}))}$call(e){return e(this)}toOperationNode(){return this.#e}}o(ForeignKeyConstraintBuilder,"don't await ForeignKeyConstraintBuilder instances directly.");const xe=e({is:e=>"AddConstraintNode"===e.kind,create:t=>e({kind:"AddConstraintNode",constraint:t})}),be=e({is:e=>"UniqueConstraintNode"===e.kind,create:(i,s)=>e({kind:"UniqueConstraintNode",columns:e(i.map(r.create)),name:s?t.create(s):void 0})}),Te=e({is:e=>"DropConstraintNode"===e.kind,create:i=>e({kind:"DropConstraintNode",constraintName:t.create(i)}),cloneWith:(t,i)=>e({...t,...i})});class AlterColumnBuilder{alterColumnNode;constructor(e){this.alterColumnNode=e}setDataType(e){return new AlteredColumnBuilder(le.cloneWith(this.alterColumnNode,{dataType:parseDataTypeExpression(e)}))}setDefault(e){return new AlteredColumnBuilder(le.cloneWith(this.alterColumnNode,{setDefault:parseDefaultValueExpression(e)}))}dropDefault(){return new AlteredColumnBuilder(le.cloneWith(this.alterColumnNode,{dropDefault:!0}))}setNotNull(){return new AlteredColumnBuilder(le.cloneWith(this.alterColumnNode,{setNotNull:!0}))}dropNotNull(){return new AlteredColumnBuilder(le.cloneWith(this.alterColumnNode,{dropNotNull:!0}))}$call(e){return e(this)}}class AlteredColumnBuilder extends AlterColumnBuilder{toOperationNode(){return this.alterColumnNode}}class AlterTableExecutor{#t;constructor(t){this.#t=e(t)}toOperationNode(){return this.#t.executor.transformQuery(this.#t.node,this.#t.queryId)}compile(){return this.#t.executor.compileQuery(this.toOperationNode(),this.#t.queryId)}async execute(){await this.#t.executor.executeQuery(this.compile(),this.#t.queryId)}}o(AlterTableExecutor,"don't await AlterTableExecutor instances directly. To execute the query you need to call `execute`");class AlterTableAddForeignKeyConstraintBuilder{#t;constructor(t){this.#t=e(t)}onDelete(e){return new AlterTableAddForeignKeyConstraintBuilder({...this.#t,constraintBuilder:this.#t.constraintBuilder.onDelete(e)})}onUpdate(e){return new AlterTableAddForeignKeyConstraintBuilder({...this.#t,constraintBuilder:this.#t.constraintBuilder.onUpdate(e)})}$call(e){return e(this)}toOperationNode(){return this.#t.executor.transformQuery(ee.cloneWithTableProps(this.#t.node,{addConstraint:xe.create(this.#t.constraintBuilder.toOperationNode())}),this.#t.queryId)}compile(){return this.#t.executor.compileQuery(this.toOperationNode(),this.#t.queryId)}async execute(){await this.#t.executor.executeQuery(this.compile(),this.#t.queryId)}}o(AlterTableAddForeignKeyConstraintBuilder,"don't await AlterTableAddForeignKeyConstraintBuilder instances directly. To execute the query you need to call `execute`");class AlterTableDropConstraintBuilder{#t;constructor(t){this.#t=e(t)}ifExists(){return new AlterTableDropConstraintBuilder({...this.#t,node:ee.cloneWithTableProps(this.#t.node,{dropConstraint:Te.cloneWith(this.#t.node.dropConstraint,{ifExists:!0})})})}cascade(){return new AlterTableDropConstraintBuilder({...this.#t,node:ee.cloneWithTableProps(this.#t.node,{dropConstraint:Te.cloneWith(this.#t.node.dropConstraint,{modifier:"cascade"})})})}restrict(){return new AlterTableDropConstraintBuilder({...this.#t,node:ee.cloneWithTableProps(this.#t.node,{dropConstraint:Te.cloneWith(this.#t.node.dropConstraint,{modifier:"restrict"})})})}$call(e){return e(this)}toOperationNode(){return this.#t.executor.transformQuery(this.#t.node,this.#t.queryId)}compile(){return this.#t.executor.compileQuery(this.toOperationNode(),this.#t.queryId)}async execute(){await this.#t.executor.executeQuery(this.compile(),this.#t.queryId)}}o(AlterTableDropConstraintBuilder,"don't await AlterTableDropConstraintBuilder instances directly. To execute the query you need to call `execute`");class AlterTableBuilder{#t;constructor(t){this.#t=e(t)}renameTo(e){return new AlterTableExecutor({...this.#t,node:ee.cloneWithTableProps(this.#t.node,{renameTo:l(e)})})}setSchema(e){return new AlterTableExecutor({...this.#t,node:ee.cloneWithTableProps(this.#t.node,{setSchema:t.create(e)})})}alterColumn(e,t){const i=t(new AlterColumnBuilder(le.create(e)));return new AlterTableColumnAlteringBuilder({...this.#t,node:ee.cloneWithColumnAlteration(this.#t.node,i.toOperationNode())})}dropColumn(e){return new AlterTableColumnAlteringBuilder({...this.#t,node:ee.cloneWithColumnAlteration(this.#t.node,ue.create(e))})}renameColumn(e,t){return new AlterTableColumnAlteringBuilder({...this.#t,node:ee.cloneWithColumnAlteration(this.#t.node,he.create(e,t))})}addColumn(e,t,i=c){const r=i(new ColumnDefinitionBuilder(ce.create(e,parseDataTypeExpression(t))));return new AlterTableColumnAlteringBuilder({...this.#t,node:ee.cloneWithColumnAlteration(this.#t.node,pe.create(r.toOperationNode()))})}modifyColumn(e,t,i=c){const r=i(new ColumnDefinitionBuilder(ce.create(e,parseDataTypeExpression(t))));return new AlterTableColumnAlteringBuilder({...this.#t,node:ee.cloneWithColumnAlteration(this.#t.node,Ne.create(r.toOperationNode()))})}addUniqueConstraint(e,t){return new AlterTableExecutor({...this.#t,node:ee.cloneWithTableProps(this.#t.node,{addConstraint:xe.create(be.create(t,e))})})}addCheckConstraint(e,t){return new AlterTableExecutor({...this.#t,node:ee.cloneWithTableProps(this.#t.node,{addConstraint:xe.create(me.create(t.toOperationNode(),e))})})}addForeignKeyConstraint(e,t,i,s){return new AlterTableAddForeignKeyConstraintBuilder({...this.#t,constraintBuilder:new ForeignKeyConstraintBuilder(Ce.create(t.map(r.create),l(i),s.map(r.create),e))})}dropConstraint(e){return new AlterTableDropConstraintBuilder({...this.#t,node:ee.cloneWithTableProps(this.#t.node,{dropConstraint:Te.create(e)})})}$call(e){return e(this)}call(e){return this.$call(e)}}class AlterTableColumnAlteringBuilder{#t;constructor(t){this.#t=e(t)}alterColumn(e,t){const i=t(new AlterColumnBuilder(le.create(e)));return new AlterTableColumnAlteringBuilder({...this.#t,node:ee.cloneWithColumnAlteration(this.#t.node,i.toOperationNode())})}dropColumn(e){return new AlterTableColumnAlteringBuilder({...this.#t,node:ee.cloneWithColumnAlteration(this.#t.node,ue.create(e))})}renameColumn(e,t){return new AlterTableColumnAlteringBuilder({...this.#t,node:ee.cloneWithColumnAlteration(this.#t.node,he.create(e,t))})}addColumn(e,t,i=c){const r=i(new ColumnDefinitionBuilder(ce.create(e,parseDataTypeExpression(t))));return new AlterTableColumnAlteringBuilder({...this.#t,node:ee.cloneWithColumnAlteration(this.#t.node,pe.create(r.toOperationNode()))})}modifyColumn(e,t,i=c){const r=i(new ColumnDefinitionBuilder(ce.create(e,parseDataTypeExpression(t))));return new AlterTableColumnAlteringBuilder({...this.#t,node:ee.cloneWithColumnAlteration(this.#t.node,Ne.create(r.toOperationNode()))})}toOperationNode(){return this.#t.executor.transformQuery(this.#t.node,this.#t.queryId)}compile(){return this.#t.executor.compileQuery(this.toOperationNode(),this.#t.queryId)}async execute(){await this.#t.executor.executeQuery(this.compile(),this.#t.queryId)}}o(AlterTableBuilder,"don't await AlterTableBuilder instances"),o(AlterColumnBuilder,"don't await AlterColumnBuilder instances"),o(AlterTableColumnAlteringBuilder,"don't await AlterTableColumnAlteringBuilder instances directly. To execute the query you need to call `execute`");class ImmediateValueTransformer extends u{transformValue(e){return{...super.transformValue(e),immediate:!0}}}class CreateIndexBuilder{#t;constructor(t){this.#t=e(t)}ifNotExists(){return new CreateIndexBuilder({...this.#t,node:te.cloneWith(this.#t.node,{ifNotExists:!0})})}unique(){return new CreateIndexBuilder({...this.#t,node:te.cloneWith(this.#t.node,{unique:!0})})}on(e){return new CreateIndexBuilder({...this.#t,node:te.cloneWith(this.#t.node,{table:l(e)})})}column(e){return new CreateIndexBuilder({...this.#t,node:te.cloneWithColumns(this.#t.node,[h(e)])})}columns(e){return new CreateIndexBuilder({...this.#t,node:te.cloneWithColumns(this.#t.node,e.map(h))})}expression(e){return new CreateIndexBuilder({...this.#t,node:te.cloneWithColumns(this.#t.node,[e.toOperationNode()])})}using(e){return new CreateIndexBuilder({...this.#t,node:te.cloneWith(this.#t.node,{using:m.createWithSql(e)})})}where(...e){const t=new ImmediateValueTransformer;return new CreateIndexBuilder({...this.#t,node:y.cloneWithWhere(this.#t.node,t.transformNode(g(e)))})}$call(e){return e(this)}toOperationNode(){return this.#t.executor.transformQuery(this.#t.node,this.#t.queryId)}compile(){return this.#t.executor.compileQuery(this.toOperationNode(),this.#t.queryId)}async execute(){await this.#t.executor.executeQuery(this.compile(),this.#t.queryId)}}o(CreateIndexBuilder,"don't await CreateIndexBuilder instances directly. To execute the query you need to call `execute`");class CreateSchemaBuilder{#t;constructor(t){this.#t=e(t)}ifNotExists(){return new CreateSchemaBuilder({...this.#t,node:ie.cloneWith(this.#t.node,{ifNotExists:!0})})}$call(e){return e(this)}toOperationNode(){return this.#t.executor.transformQuery(this.#t.node,this.#t.queryId)}compile(){return this.#t.executor.compileQuery(this.toOperationNode(),this.#t.queryId)}async execute(){await this.#t.executor.executeQuery(this.compile(),this.#t.queryId)}}o(CreateSchemaBuilder,"don't await CreateSchemaBuilder instances directly. To execute the query you need to call `execute`");const Be=e({is:e=>"PrimaryKeyConstraintNode"===e.kind,create:(i,s)=>e({kind:"PrimaryKeyConstraintNode",columns:e(i.map(r.create)),name:s?t.create(s):void 0})});function parseOnCommitAction(e){if(re.includes(e))return e;throw new Error(`invalid OnCommitAction ${e}`)}class CreateTableBuilder{#t;constructor(t){this.#t=e(t)}temporary(){return new CreateTableBuilder({...this.#t,node:se.cloneWith(this.#t.node,{temporary:!0})})}onCommit(e){return new CreateTableBuilder({...this.#t,node:se.cloneWith(this.#t.node,{onCommit:parseOnCommitAction(e)})})}ifNotExists(){return new CreateTableBuilder({...this.#t,node:se.cloneWith(this.#t.node,{ifNotExists:!0})})}addColumn(e,t,i=c){const r=i(new ColumnDefinitionBuilder(ce.create(e,parseDataTypeExpression(t))));return new CreateTableBuilder({...this.#t,node:se.cloneWithColumn(this.#t.node,r.toOperationNode())})}addPrimaryKeyConstraint(e,t){return new CreateTableBuilder({...this.#t,node:se.cloneWithConstraint(this.#t.node,Be.create(t,e))})}addUniqueConstraint(e,t){return new CreateTableBuilder({...this.#t,node:se.cloneWithConstraint(this.#t.node,be.create(t,e))})}addCheckConstraint(e,t){return new CreateTableBuilder({...this.#t,node:se.cloneWithConstraint(this.#t.node,me.create(t.toOperationNode(),e))})}addForeignKeyConstraint(e,t,i,s,n=c){const o=n(new ForeignKeyConstraintBuilder(Ce.create(t.map(r.create),l(i),s.map(r.create),e)));return new CreateTableBuilder({...this.#t,node:se.cloneWithConstraint(this.#t.node,o.toOperationNode())})}modifyFront(e){return new CreateTableBuilder({...this.#t,node:se.cloneWithFrontModifier(this.#t.node,e.toOperationNode())})}modifyEnd(e){return new CreateTableBuilder({...this.#t,node:se.cloneWithEndModifier(this.#t.node,e.toOperationNode())})}$call(e){return e(this)}call(e){return this.$call(e)}toOperationNode(){return this.#t.executor.transformQuery(this.#t.node,this.#t.queryId)}compile(){return this.#t.executor.compileQuery(this.toOperationNode(),this.#t.queryId)}async execute(){await this.#t.executor.executeQuery(this.compile(),this.#t.queryId)}}o(CreateTableBuilder,"don't await CreateTableBuilder instances directly. To execute the query you need to call `execute`");class DropIndexBuilder{#t;constructor(t){this.#t=e(t)}on(e){return new DropIndexBuilder({...this.#t,node:ne.cloneWith(this.#t.node,{table:l(e)})})}ifExists(){return new DropIndexBuilder({...this.#t,node:ne.cloneWith(this.#t.node,{ifExists:!0})})}cascade(){return new DropIndexBuilder({...this.#t,node:ne.cloneWith(this.#t.node,{cascade:!0})})}$call(e){return e(this)}toOperationNode(){return this.#t.executor.transformQuery(this.#t.node,this.#t.queryId)}compile(){return this.#t.executor.compileQuery(this.toOperationNode(),this.#t.queryId)}async execute(){await this.#t.executor.executeQuery(this.compile(),this.#t.queryId)}}o(DropIndexBuilder,"don't await DropIndexBuilder instances directly. To execute the query you need to call `execute`");class DropSchemaBuilder{#t;constructor(t){this.#t=e(t)}ifExists(){return new DropSchemaBuilder({...this.#t,node:oe.cloneWith(this.#t.node,{ifExists:!0})})}cascade(){return new DropSchemaBuilder({...this.#t,node:oe.cloneWith(this.#t.node,{cascade:!0})})}$call(e){return e(this)}toOperationNode(){return this.#t.executor.transformQuery(this.#t.node,this.#t.queryId)}compile(){return this.#t.executor.compileQuery(this.toOperationNode(),this.#t.queryId)}async execute(){await this.#t.executor.executeQuery(this.compile(),this.#t.queryId)}}o(DropSchemaBuilder,"don't await DropSchemaBuilder instances directly. To execute the query you need to call `execute`");class DropTableBuilder{#t;constructor(t){this.#t=e(t)}ifExists(){return new DropTableBuilder({...this.#t,node:de.cloneWith(this.#t.node,{ifExists:!0})})}cascade(){return new DropTableBuilder({...this.#t,node:de.cloneWith(this.#t.node,{cascade:!0})})}$call(e){return e(this)}toOperationNode(){return this.#t.executor.transformQuery(this.#t.node,this.#t.queryId)}compile(){return this.#t.executor.compileQuery(this.toOperationNode(),this.#t.queryId)}async execute(){await this.#t.executor.executeQuery(this.compile(),this.#t.queryId)}}o(DropTableBuilder,"don't await DropTableBuilder instances directly. To execute the query you need to call `execute`");const De=e({is:e=>"CreateViewNode"===e.kind,create:t=>e({kind:"CreateViewNode",name:i.create(t)}),cloneWith:(t,i)=>e({...t,...i})});class ImmediateValuePlugin{#i=new ImmediateValueTransformer;transformQuery(e){return this.#i.transformNode(e.node)}transformResult(e){return Promise.resolve(e.result)}}class CreateViewBuilder{#t;constructor(t){this.#t=e(t)}temporary(){return new CreateViewBuilder({...this.#t,node:De.cloneWith(this.#t.node,{temporary:!0})})}materialized(){return new CreateViewBuilder({...this.#t,node:De.cloneWith(this.#t.node,{materialized:!0})})}ifNotExists(){return new CreateViewBuilder({...this.#t,node:De.cloneWith(this.#t.node,{ifNotExists:!0})})}orReplace(){return new CreateViewBuilder({...this.#t,node:De.cloneWith(this.#t.node,{orReplace:!0})})}columns(e){return new CreateViewBuilder({...this.#t,node:De.cloneWith(this.#t.node,{columns:e.map(w)})})}as(e){const t=e.withPlugin(new ImmediateValuePlugin).toOperationNode();return new CreateViewBuilder({...this.#t,node:De.cloneWith(this.#t.node,{as:t})})}$call(e){return e(this)}toOperationNode(){return this.#t.executor.transformQuery(this.#t.node,this.#t.queryId)}compile(){return this.#t.executor.compileQuery(this.toOperationNode(),this.#t.queryId)}async execute(){await this.#t.executor.executeQuery(this.compile(),this.#t.queryId)}}o(CreateViewBuilder,"don't await CreateViewBuilder instances directly. To execute the query you need to call `execute`");const Ae=e({is:e=>"DropViewNode"===e.kind,create:t=>e({kind:"DropViewNode",name:i.create(t)}),cloneWith:(t,i)=>e({...t,...i})});class DropViewBuilder{#t;constructor(t){this.#t=e(t)}materialized(){return new DropViewBuilder({...this.#t,node:Ae.cloneWith(this.#t.node,{materialized:!0})})}ifExists(){return new DropViewBuilder({...this.#t,node:Ae.cloneWith(this.#t.node,{ifExists:!0})})}cascade(){return new DropViewBuilder({...this.#t,node:Ae.cloneWith(this.#t.node,{cascade:!0})})}$call(e){return e(this)}toOperationNode(){return this.#t.executor.transformQuery(this.#t.node,this.#t.queryId)}compile(){return this.#t.executor.compileQuery(this.toOperationNode(),this.#t.queryId)}async execute(){await this.#t.executor.executeQuery(this.compile(),this.#t.queryId)}}o(DropViewBuilder,"don't await DropViewBuilder instances directly. To execute the query you need to call `execute`");const Ee=e({is:e=>"CreateTypeNode"===e.kind,create:t=>e({kind:"CreateTypeNode",name:t}),cloneWithEnum:(t,i)=>e({...t,enum:f.create(i.map((e=>n.createImmediate(e))))})});class CreateTypeBuilder{#t;constructor(t){this.#t=e(t)}toOperationNode(){return this.#t.executor.transformQuery(this.#t.node,this.#t.queryId)}asEnum(e){return new CreateTypeBuilder({...this.#t,node:Ee.cloneWithEnum(this.#t.node,e)})}$call(e){return e(this)}compile(){return this.#t.executor.compileQuery(this.toOperationNode(),this.#t.queryId)}async execute(){await this.#t.executor.executeQuery(this.compile(),this.#t.queryId)}}o(CreateTypeBuilder,"don't await CreateTypeBuilder instances directly. To execute the query you need to call `execute`");const Ie=e({is:e=>"DropTypeNode"===e.kind,create:t=>e({kind:"DropTypeNode",name:t}),cloneWith:(t,i)=>e({...t,...i})});class DropTypeBuilder{#t;constructor(t){this.#t=e(t)}ifExists(){return new DropTypeBuilder({...this.#t,node:Ie.cloneWith(this.#t.node,{ifExists:!0})})}$call(e){return e(this)}toOperationNode(){return this.#t.executor.transformQuery(this.#t.node,this.#t.queryId)}compile(){return this.#t.executor.compileQuery(this.toOperationNode(),this.#t.queryId)}async execute(){await this.#t.executor.executeQuery(this.compile(),this.#t.queryId)}}function parseSchemableIdentifier(e){if(e.includes(".")){const t=e.split(".").map(trim);if(2===t.length)return i.createWithSchema(t[0],t[1]);throw new Error(`invalid schemable identifier ${e}`)}return i.create(e)}function trim(e){return e.trim()}o(DropTypeBuilder,"don't await DropTypeBuilder instances directly. To execute the query you need to call `execute`");class SchemaModule{#r;constructor(e){this.#r=e}createTable(e){return new CreateTableBuilder({queryId:v(),executor:this.#r,node:se.create(l(e))})}dropTable(e){return new DropTableBuilder({queryId:v(),executor:this.#r,node:de.create(l(e))})}createIndex(e){return new CreateIndexBuilder({queryId:v(),executor:this.#r,node:te.create(e)})}dropIndex(e){return new DropIndexBuilder({queryId:v(),executor:this.#r,node:ne.create(e)})}createSchema(e){return new CreateSchemaBuilder({queryId:v(),executor:this.#r,node:ie.create(e)})}dropSchema(e){return new DropSchemaBuilder({queryId:v(),executor:this.#r,node:oe.create(e)})}alterTable(e){return new AlterTableBuilder({queryId:v(),executor:this.#r,node:ee.create(l(e))})}createView(e){return new CreateViewBuilder({queryId:v(),executor:this.#r,node:De.create(e)})}dropView(e){return new DropViewBuilder({queryId:v(),executor:this.#r,node:Ae.create(e)})}createType(e){return new CreateTypeBuilder({queryId:v(),executor:this.#r,node:Ee.create(parseSchemableIdentifier(e))})}dropType(e){return new DropTypeBuilder({queryId:v(),executor:this.#r,node:Ie.create(parseSchemableIdentifier(e))})}withPlugin(e){return new SchemaModule(this.#r.withPlugin(e))}withoutPlugins(){return new SchemaModule(this.#r.withoutPlugins())}withSchema(e){return new SchemaModule(this.#r.withPluginAtFront(new C(e)))}}class DynamicModule{ref(e){return new x(e)}}class DefaultConnectionProvider{#s;constructor(e){this.#s=e}async provideConnection(e){const t=await this.#s.acquireConnection();try{return await e(t)}finally{await this.#s.releaseConnection(t)}}}class DefaultQueryExecutor extends b{#n;#o;#a;constructor(e,t,i,r=[]){super(r),this.#n=e,this.#o=t,this.#a=i}get adapter(){return this.#o}compileQuery(e){return this.#n.compileQuery(e)}provideConnection(e){return this.#a.provideConnection(e)}withPlugins(e){return new DefaultQueryExecutor(this.#n,this.#o,this.#a,[...this.plugins,...e])}withPlugin(e){return new DefaultQueryExecutor(this.#n,this.#o,this.#a,[...this.plugins,e])}withPluginAtFront(e){return new DefaultQueryExecutor(this.#n,this.#o,this.#a,[e,...this.plugins])}withConnectionProvider(e){return new DefaultQueryExecutor(this.#n,this.#o,e,[...this.plugins])}withoutPlugins(){return new DefaultQueryExecutor(this.#n,this.#o,this.#a,[])}}function performanceNow(){return"undefined"!=typeof performance&&B(performance.now)?performance.now():Date.now()}class RuntimeDriver{#s;#d;#p;#l;#c=new WeakSet;constructor(e,t){this.#s=e,this.#d=t}async init(){this.#p||(this.#p=this.#s.init().catch((e=>(this.#p=void 0,Promise.reject(e))))),await this.#p}async acquireConnection(){await this.init();const e=await this.#s.acquireConnection();return this.#c.has(e)||(this.#u()&&this.#h(e),this.#c.add(e)),e}async releaseConnection(e){await this.#s.releaseConnection(e)}beginTransaction(e,t){return this.#s.beginTransaction(e,t)}commitTransaction(e){return this.#s.commitTransaction(e)}rollbackTransaction(e){return this.#s.rollbackTransaction(e)}async destroy(){this.#p&&(await this.#p,this.#l||(this.#l=this.#s.destroy().catch((e=>(this.#l=void 0,Promise.reject(e))))),await this.#l)}#u(){return this.#d.isLevelEnabled("query")||this.#d.isLevelEnabled("error")}#h(e){const t=e.executeQuery;e.executeQuery=async i=>{const r=performanceNow();try{return await t.call(e,i)}catch(e){throw await this.#m(e,i,r),e}finally{await this.#y(i,r)}}}async#m(e,t,i){await this.#d.error((()=>({level:"error",error:e,query:t,queryDurationMillis:this.#g(i)})))}async#y(e,t){await this.#d.query((()=>({level:"query",query:e,queryDurationMillis:this.#g(t)})))}#g(e){return performanceNow()-e}}class SingleConnectionProvider{#w;#f;constructor(e){this.#w=e}async provideConnection(e){for(;this.#f;)await this.#f;const t=this.#N(e);return this.#f=t.then((()=>{this.#f=void 0})).catch((()=>{this.#f=void 0})),t}async#N(e){return await e(this.#w)}}const ke=["read uncommitted","read committed","repeatable read","serializable"],Oe=e(["query","error"]);class Log{#v;#C;constructor(t){B(t)?(this.#C=t,this.#v=e({query:!0,error:!0})):(this.#C=defaultLogger,this.#v=e({query:t.includes("query"),error:t.includes("error")}))}isLevelEnabled(e){return this.#v[e]}async query(e){this.#v.query&&await this.#C(e())}async error(e){this.#v.error&&await this.#C(e())}}function defaultLogger(e){"query"===e.level?(console.log(`kysely:query: ${e.query.sql}`),console.log(`kysely:query: duration: ${e.queryDurationMillis.toFixed(1)}ms`)):"error"===e.level&&(e.error instanceof Error?console.error(`kysely:error: ${e.error.stack??e.error.message}`):console.error(`kysely:error: ${e}`))}function isCompilable(e){return D(e)&&B(e.compile)}class Kysely extends A{#t;constructor(t){let i,r;if(isKyselyProps(t))i={executor:t.executor},r={...t};else{const e=t.dialect,s=e.createDriver(),n=e.createQueryCompiler(),o=e.createAdapter(),a=new Log(t.log??[]),d=new RuntimeDriver(s,a),p=new DefaultConnectionProvider(d),l=new DefaultQueryExecutor(n,o,p,t.plugins??[]);i={executor:l},r={config:t,executor:l,dialect:e,driver:d}}super(i),this.#t=e(r)}get schema(){return new SchemaModule(this.#t.executor)}get dynamic(){return new DynamicModule}get introspection(){return this.#t.dialect.createIntrospector(this.withoutPlugins())}case(e){return new E({node:I.create(k(e)?void 0:O(e))})}get fn(){return S()}transaction(){return new TransactionBuilder({...this.#t})}connection(){return new ConnectionBuilder({...this.#t})}withPlugin(e){return new Kysely({...this.#t,executor:this.#t.executor.withPlugin(e)})}withoutPlugins(){return new Kysely({...this.#t,executor:this.#t.executor.withoutPlugins()})}withSchema(e){return new Kysely({...this.#t,executor:this.#t.executor.withPluginAtFront(new C(e))})}withTables(){return new Kysely({...this.#t})}async destroy(){await this.#t.driver.destroy()}get isTransaction(){return!1}getExecutor(){return this.#t.executor}executeQuery(e,t=v()){const i=isCompilable(e)?e.compile():e;return this.getExecutor().executeQuery(i,t)}}class Transaction extends Kysely{#t;constructor(e){super(e),this.#t=e}get isTransaction(){return!0}transaction(){throw new Error("calling the transaction method for a Transaction is not supported")}connection(){throw new Error("calling the connection method for a Transaction is not supported")}async destroy(){throw new Error("calling the destroy method for a Transaction is not supported")}withPlugin(e){return new Transaction({...this.#t,executor:this.#t.executor.withPlugin(e)})}withoutPlugins(){return new Transaction({...this.#t,executor:this.#t.executor.withoutPlugins()})}withSchema(e){return new Transaction({...this.#t,executor:this.#t.executor.withPluginAtFront(new C(e))})}withTables(){return new Transaction({...this.#t})}}function isKyselyProps(e){return D(e)&&D(e.config)&&D(e.driver)&&D(e.executor)&&D(e.dialect)}class ConnectionBuilder{#t;constructor(t){this.#t=e(t)}async execute(e){return this.#t.executor.provideConnection((async t=>{const i=this.#t.executor.withConnectionProvider(new SingleConnectionProvider(t)),r=new Kysely({...this.#t,executor:i});return await e(r)}))}}o(ConnectionBuilder,"don't await ConnectionBuilder instances directly. To execute the query you need to call the `execute` method");class TransactionBuilder{#t;constructor(t){this.#t=e(t)}setIsolationLevel(e){return new TransactionBuilder({...this.#t,isolationLevel:e})}async execute(e){const{isolationLevel:t,...i}=this.#t,r={isolationLevel:t};return function validateTransactionSettings(e){if(e.isolationLevel&&!ke.includes(e.isolationLevel))throw new Error(`invalid transaction isolation level ${e.isolationLevel}`)}(r),this.#t.executor.provideConnection((async t=>{const s=this.#t.executor.withConnectionProvider(new SingleConnectionProvider(t)),n=new Transaction({...i,executor:s});try{await this.#t.driver.beginTransaction(t,r);const i=await e(n);return await this.#t.driver.commitTransaction(t),i}catch(e){throw await this.#t.driver.rollbackTransaction(t),e}}))}}o(TransactionBuilder,"don't await TransactionBuilder instances directly. To execute the transaction you need to call the `execute` method");class OperationNodeVisitor{nodeStack=[];get parentNode(){return this.nodeStack[this.nodeStack.length-2]}#x=e({AliasNode:this.visitAlias.bind(this),ColumnNode:this.visitColumn.bind(this),IdentifierNode:this.visitIdentifier.bind(this),SchemableIdentifierNode:this.visitSchemableIdentifier.bind(this),RawNode:this.visitRaw.bind(this),ReferenceNode:this.visitReference.bind(this),SelectQueryNode:this.visitSelectQuery.bind(this),SelectionNode:this.visitSelection.bind(this),TableNode:this.visitTable.bind(this),FromNode:this.visitFrom.bind(this),SelectAllNode:this.visitSelectAll.bind(this),AndNode:this.visitAnd.bind(this),OrNode:this.visitOr.bind(this),ValueNode:this.visitValue.bind(this),ValueListNode:this.visitValueList.bind(this),PrimitiveValueListNode:this.visitPrimitiveValueList.bind(this),ParensNode:this.visitParens.bind(this),JoinNode:this.visitJoin.bind(this),OperatorNode:this.visitOperator.bind(this),WhereNode:this.visitWhere.bind(this),InsertQueryNode:this.visitInsertQuery.bind(this),DeleteQueryNode:this.visitDeleteQuery.bind(this),ReturningNode:this.visitReturning.bind(this),CreateTableNode:this.visitCreateTable.bind(this),AddColumnNode:this.visitAddColumn.bind(this),ColumnDefinitionNode:this.visitColumnDefinition.bind(this),DropTableNode:this.visitDropTable.bind(this),DataTypeNode:this.visitDataType.bind(this),OrderByNode:this.visitOrderBy.bind(this),OrderByItemNode:this.visitOrderByItem.bind(this),GroupByNode:this.visitGroupBy.bind(this),GroupByItemNode:this.visitGroupByItem.bind(this),UpdateQueryNode:this.visitUpdateQuery.bind(this),ColumnUpdateNode:this.visitColumnUpdate.bind(this),LimitNode:this.visitLimit.bind(this),OffsetNode:this.visitOffset.bind(this),OnConflictNode:this.visitOnConflict.bind(this),OnDuplicateKeyNode:this.visitOnDuplicateKey.bind(this),CreateIndexNode:this.visitCreateIndex.bind(this),DropIndexNode:this.visitDropIndex.bind(this),ListNode:this.visitList.bind(this),PrimaryKeyConstraintNode:this.visitPrimaryKeyConstraint.bind(this),UniqueConstraintNode:this.visitUniqueConstraint.bind(this),ReferencesNode:this.visitReferences.bind(this),CheckConstraintNode:this.visitCheckConstraint.bind(this),WithNode:this.visitWith.bind(this),CommonTableExpressionNode:this.visitCommonTableExpression.bind(this),CommonTableExpressionNameNode:this.visitCommonTableExpressionName.bind(this),HavingNode:this.visitHaving.bind(this),CreateSchemaNode:this.visitCreateSchema.bind(this),DropSchemaNode:this.visitDropSchema.bind(this),AlterTableNode:this.visitAlterTable.bind(this),DropColumnNode:this.visitDropColumn.bind(this),RenameColumnNode:this.visitRenameColumn.bind(this),AlterColumnNode:this.visitAlterColumn.bind(this),ModifyColumnNode:this.visitModifyColumn.bind(this),AddConstraintNode:this.visitAddConstraint.bind(this),DropConstraintNode:this.visitDropConstraint.bind(this),ForeignKeyConstraintNode:this.visitForeignKeyConstraint.bind(this),CreateViewNode:this.visitCreateView.bind(this),DropViewNode:this.visitDropView.bind(this),GeneratedNode:this.visitGenerated.bind(this),DefaultValueNode:this.visitDefaultValue.bind(this),OnNode:this.visitOn.bind(this),ValuesNode:this.visitValues.bind(this),SelectModifierNode:this.visitSelectModifier.bind(this),CreateTypeNode:this.visitCreateType.bind(this),DropTypeNode:this.visitDropType.bind(this),ExplainNode:this.visitExplain.bind(this),DefaultInsertValueNode:this.visitDefaultInsertValue.bind(this),AggregateFunctionNode:this.visitAggregateFunction.bind(this),OverNode:this.visitOver.bind(this),PartitionByNode:this.visitPartitionBy.bind(this),PartitionByItemNode:this.visitPartitionByItem.bind(this),SetOperationNode:this.visitSetOperation.bind(this),BinaryOperationNode:this.visitBinaryOperation.bind(this),UnaryOperationNode:this.visitUnaryOperation.bind(this),UsingNode:this.visitUsing.bind(this),FunctionNode:this.visitFunction.bind(this),CaseNode:this.visitCase.bind(this),WhenNode:this.visitWhen.bind(this)});visitNode=e=>{this.nodeStack.push(e),this.#x[e.kind](e),this.nodeStack.pop()}}class DefaultQueryCompiler extends OperationNodeVisitor{#b="";#T=[];get numParameters(){return this.#T.length}compileQuery(t){return this.#b="",this.#T=[],this.visitNode(t),e({query:t,sql:this.getSql(),parameters:[...this.#T]})}getSql(){return this.#b}visitSelectQuery(e){const t=void 0!==this.parentNode&&!q.is(this.parentNode)&&!De.is(this.parentNode)&&!M.is(this.parentNode);void 0===this.parentNode&&e.explain&&(this.visitNode(e.explain),this.append(" ")),t&&this.append("("),e.with&&(this.visitNode(e.with),this.append(" ")),this.append("select "),e.distinctOn&&(this.compileDistinctOn(e.distinctOn),this.append(" ")),e.frontModifiers&&e.frontModifiers.length>0&&(this.compileList(e.frontModifiers," "),this.append(" ")),e.selections&&(this.compileList(e.selections),this.append(" ")),this.visitNode(e.from),e.joins&&(this.append(" "),this.compileList(e.joins," ")),e.where&&(this.append(" "),this.visitNode(e.where)),e.groupBy&&(this.append(" "),this.visitNode(e.groupBy)),e.having&&(this.append(" "),this.visitNode(e.having)),e.setOperations&&(this.append(" "),this.compileList(e.setOperations," ")),e.orderBy&&(this.append(" "),this.visitNode(e.orderBy)),e.limit&&(this.append(" "),this.visitNode(e.limit)),e.offset&&(this.append(" "),this.visitNode(e.offset)),e.endModifiers&&e.endModifiers.length>0&&(this.append(" "),this.compileList(e.endModifiers," ")),t&&this.append(")")}visitFrom(e){this.append("from "),this.compileList(e.froms)}visitSelection(e){this.visitNode(e.selection)}visitColumn(e){this.visitNode(e.column)}compileDistinctOn(e){this.append("distinct on ("),this.compileList(e),this.append(")")}compileList(e,t=", "){const i=e.length-1;for(let r=0;r<=i;r++)this.visitNode(e[r]),r<i&&this.append(t)}visitWhere(e){this.append("where "),this.visitNode(e.where)}visitHaving(e){this.append("having "),this.visitNode(e.having)}visitInsertQuery(e){const t=this.nodeStack.find(y.is)!==e;!t&&e.explain&&(this.visitNode(e.explain),this.append(" ")),t&&this.append("("),e.with&&(this.visitNode(e.with),this.append(" ")),this.append(e.replace?"replace":"insert"),e.ignore&&this.append(" ignore"),this.append(" into "),this.visitNode(e.into),e.columns&&(this.append(" ("),this.compileList(e.columns),this.append(")")),e.values&&(this.append(" "),this.visitNode(e.values)),e.onConflict&&(this.append(" "),this.visitNode(e.onConflict)),e.onDuplicateKey&&(this.append(" "),this.visitNode(e.onDuplicateKey)),e.returning&&(this.append(" "),this.visitNode(e.returning)),t&&this.append(")")}visitValues(e){this.append("values "),this.compileList(e.values)}visitDeleteQuery(e){const t=this.nodeStack.find(y.is)!==e;!t&&e.explain&&(this.visitNode(e.explain),this.append(" ")),t&&this.append("("),e.with&&(this.visitNode(e.with),this.append(" ")),this.append("delete "),this.visitNode(e.from),e.using&&(this.append(" "),this.visitNode(e.using)),e.joins&&(this.append(" "),this.compileList(e.joins," ")),e.where&&(this.append(" "),this.visitNode(e.where)),e.orderBy&&(this.append(" "),this.visitNode(e.orderBy)),e.limit&&(this.append(" "),this.visitNode(e.limit)),e.returning&&(this.append(" "),this.visitNode(e.returning)),t&&this.append(")")}visitReturning(e){this.append("returning "),this.compileList(e.selections)}visitAlias(e){this.visitNode(e.node),this.append(" as "),this.visitNode(e.alias)}visitReference(e){this.visitNode(e.table),this.append("."),this.visitNode(e.column)}visitSelectAll(e){this.append("*")}visitIdentifier(e){this.append(this.getLeftIdentifierWrapper()),this.compileUnwrappedIdentifier(e),this.append(this.getRightIdentifierWrapper())}compileUnwrappedIdentifier(e){if(!W(e.name))throw new Error("a non-string identifier was passed to compileUnwrappedIdentifier.");this.append(this.sanitizeIdentifier(e.name))}visitAnd(e){this.visitNode(e.left),this.append(" and "),this.visitNode(e.right)}visitOr(e){this.visitNode(e.left),this.append(" or "),this.visitNode(e.right)}visitValue(e){e.immediate?this.appendImmediateValue(e.value):this.appendValue(e.value)}visitValueList(e){this.append("("),this.compileList(e.values),this.append(")")}visitPrimitiveValueList(e){this.append("(");const{values:t}=e;for(let e=0;e<t.length;++e)this.appendValue(t[e]),e!==t.length-1&&this.append(", ");this.append(")")}visitParens(e){this.append("("),this.visitNode(e.node),this.append(")")}visitJoin(e){this.append(qe[e.joinType]),this.append(" "),this.visitNode(e.table),e.on&&(this.append(" "),this.visitNode(e.on))}visitOn(e){this.append("on "),this.visitNode(e.on)}visitRaw(e){const{sqlFragments:t,parameters:i}=e;for(let e=0;e<t.length;++e)this.append(t[e]),i.length>e&&this.visitNode(i[e])}visitOperator(e){this.append(e.operator)}visitTable(e){this.visitNode(e.table)}visitSchemableIdentifier(e){e.schema&&(this.visitNode(e.schema),this.append(".")),this.visitNode(e.identifier)}visitCreateTable(e){this.append("create "),e.frontModifiers&&e.frontModifiers.length>0&&(this.compileList(e.frontModifiers," "),this.append(" ")),e.temporary&&this.append("temporary "),this.append("table "),e.ifNotExists&&this.append("if not exists "),this.visitNode(e.table),this.append(" ("),this.compileList([...e.columns,...e.constraints??[]]),this.append(")"),e.onCommit&&(this.append(" on commit "),this.append(e.onCommit)),e.endModifiers&&e.endModifiers.length>0&&(this.append(" "),this.compileList(e.endModifiers," "))}visitColumnDefinition(e){this.visitNode(e.column),this.append(" "),this.visitNode(e.dataType),e.unsigned&&this.append(" unsigned"),e.frontModifiers&&e.frontModifiers.length>0&&(this.append(" "),this.compileList(e.frontModifiers," ")),e.generated&&(this.append(" "),this.visitNode(e.generated)),e.defaultTo&&(this.append(" "),this.visitNode(e.defaultTo)),e.notNull&&this.append(" not null"),e.unique&&this.append(" unique"),e.primaryKey&&this.append(" primary key"),e.autoIncrement&&(this.append(" "),this.append(this.getAutoIncrement())),e.references&&(this.append(" "),this.visitNode(e.references)),e.check&&(this.append(" "),this.visitNode(e.check)),e.endModifiers&&e.endModifiers.length>0&&(this.append(" "),this.compileList(e.endModifiers," "))}getAutoIncrement(){return"auto_increment"}visitReferences(e){this.append("references "),this.visitNode(e.table),this.append(" ("),this.compileList(e.columns),this.append(")"),e.onDelete&&(this.append(" on delete "),this.append(e.onDelete)),e.onUpdate&&(this.append(" on update "),this.append(e.onUpdate))}visitDropTable(e){this.append("drop table "),e.ifExists&&this.append("if exists "),this.visitNode(e.table),e.cascade&&this.append(" cascade")}visitDataType(e){this.append(e.dataType)}visitOrderBy(e){this.append("order by "),this.compileList(e.items)}visitOrderByItem(e){this.visitNode(e.orderBy),e.direction&&(this.append(" "),this.visitNode(e.direction))}visitGroupBy(e){this.append("group by "),this.compileList(e.items)}visitGroupByItem(e){this.visitNode(e.groupBy)}visitUpdateQuery(e){const t=this.nodeStack.find(y.is)!==e;!t&&e.explain&&(this.visitNode(e.explain),this.append(" ")),t&&this.append("("),e.with&&(this.visitNode(e.with),this.append(" ")),this.append("update "),this.visitNode(e.table),this.append(" set "),e.updates&&this.compileList(e.updates),e.from&&(this.append(" "),this.visitNode(e.from)),e.joins&&(this.append(" "),this.compileList(e.joins," ")),e.where&&(this.append(" "),this.visitNode(e.where)),e.returning&&(this.append(" "),this.visitNode(e.returning)),t&&this.append(")")}visitColumnUpdate(e){this.visitNode(e.column),this.append(" = "),this.visitNode(e.value)}visitLimit(e){this.append("limit "),this.visitNode(e.limit)}visitOffset(e){this.append("offset "),this.visitNode(e.offset)}visitOnConflict(e){this.append("on conflict"),e.columns?(this.append(" ("),this.compileList(e.columns),this.append(")")):e.constraint?(this.append(" on constraint "),this.visitNode(e.constraint)):e.indexExpression&&(this.append(" ("),this.visitNode(e.indexExpression),this.append(")")),e.indexWhere&&(this.append(" "),this.visitNode(e.indexWhere)),!0===e.doNothing?this.append(" do nothing"):e.updates&&(this.append(" do update set "),this.compileList(e.updates),e.updateWhere&&(this.append(" "),this.visitNode(e.updateWhere)))}visitOnDuplicateKey(e){this.append("on duplicate key update "),this.compileList(e.updates)}visitCreateIndex(e){this.append("create "),e.unique&&this.append("unique "),this.append("index "),e.ifNotExists&&this.append("if not exists "),this.visitNode(e.name),e.table&&(this.append(" on "),this.visitNode(e.table)),e.using&&(this.append(" using "),this.visitNode(e.using)),e.columns&&(this.append(" ("),this.compileList(e.columns),this.append(")")),e.where&&(this.append(" "),this.visitNode(e.where))}visitDropIndex(e){this.append("drop index "),e.ifExists&&this.append("if exists "),this.visitNode(e.name),e.table&&(this.append(" on "),this.visitNode(e.table)),e.cascade&&this.append(" cascade")}visitCreateSchema(e){this.append("create schema "),e.ifNotExists&&this.append("if not exists "),this.visitNode(e.schema)}visitDropSchema(e){this.append("drop schema "),e.ifExists&&this.append("if exists "),this.visitNode(e.schema),e.cascade&&this.append(" cascade")}visitPrimaryKeyConstraint(e){e.name&&(this.append("constraint "),this.visitNode(e.name),this.append(" ")),this.append("primary key ("),this.compileList(e.columns),this.append(")")}visitUniqueConstraint(e){e.name&&(this.append("constraint "),this.visitNode(e.name),this.append(" ")),this.append("unique ("),this.compileList(e.columns),this.append(")")}visitCheckConstraint(e){e.name&&(this.append("constraint "),this.visitNode(e.name),this.append(" ")),this.append("check ("),this.visitNode(e.expression),this.append(")")}visitForeignKeyConstraint(e){e.name&&(this.append("constraint "),this.visitNode(e.name),this.append(" ")),this.append("foreign key ("),this.compileList(e.columns),this.append(") "),this.visitNode(e.references),e.onDelete&&(this.append(" on delete "),this.append(e.onDelete)),e.onUpdate&&(this.append(" on update "),this.append(e.onUpdate))}visitList(e){this.compileList(e.items)}visitWith(e){this.append("with "),e.recursive&&this.append("recursive "),this.compileList(e.expressions)}visitCommonTableExpression(e){this.visitNode(e.name),this.append(" as "),this.visitNode(e.expression)}visitCommonTableExpressionName(e){this.visitNode(e.table),e.columns&&(this.append("("),this.compileList(e.columns),this.append(")"))}visitAlterTable(e){this.append("alter table "),this.visitNode(e.table),this.append(" "),e.renameTo&&(this.append("rename to "),this.visitNode(e.renameTo)),e.setSchema&&(this.append("set schema "),this.visitNode(e.setSchema)),e.addConstraint&&this.visitNode(e.addConstraint),e.dropConstraint&&this.visitNode(e.dropConstraint),e.columnAlterations&&this.compileList(e.columnAlterations)}visitAddColumn(e){this.append("add column "),this.visitNode(e.column)}visitRenameColumn(e){this.append("rename column "),this.visitNode(e.column),this.append(" to "),this.visitNode(e.renameTo)}visitDropColumn(e){this.append("drop column "),this.visitNode(e.column)}visitAlterColumn(e){this.append("alter column "),this.visitNode(e.column),this.append(" "),e.dataType&&(this.append("type "),this.visitNode(e.dataType),e.dataTypeExpression&&(this.append("using "),this.visitNode(e.dataTypeExpression))),e.setDefault&&(this.append("set default "),this.visitNode(e.setDefault)),e.dropDefault&&this.append("drop default"),e.setNotNull&&this.append("set not null"),e.dropNotNull&&this.append("drop not null")}visitModifyColumn(e){this.append("modify column "),this.visitNode(e.column)}visitAddConstraint(e){this.append("add "),this.visitNode(e.constraint)}visitDropConstraint(e){this.append("drop constraint "),e.ifExists&&this.append("if exists "),this.visitNode(e.constraintName),"cascade"===e.modifier?this.append(" cascade"):"restrict"===e.modifier&&this.append(" restrict")}visitSetOperation(e){this.append(e.operator),this.append(" "),e.all&&this.append("all "),this.visitNode(e.expression)}visitCreateView(e){this.append("create "),e.orReplace&&this.append("or replace "),e.materialized&&this.append("materialized "),e.temporary&&this.append("temporary "),this.append("view "),e.ifNotExists&&this.append("if not exists "),this.visitNode(e.name),this.append(" "),e.columns&&(this.append("("),this.compileList(e.columns),this.append(") ")),e.as&&(this.append("as "),this.visitNode(e.as))}visitDropView(e){this.append("drop "),e.materialized&&this.append("materialized "),this.append("view "),e.ifExists&&this.append("if exists "),this.visitNode(e.name),e.cascade&&this.append(" cascade")}visitGenerated(e){this.append("generated "),e.always&&this.append("always "),e.byDefault&&this.append("by default "),this.append("as "),e.identity&&this.append("identity"),e.expression&&(this.append("("),this.visitNode(e.expression),this.append(")")),e.stored&&this.append(" stored")}visitDefaultValue(e){this.append("default "),this.visitNode(e.defaultValue)}visitSelectModifier(e){e.rawModifier?this.visitNode(e.rawModifier):this.append(Se[e.modifier])}visitCreateType(e){this.append("create type "),this.visitNode(e.name),e.enum&&(this.append(" as enum "),this.visitNode(e.enum))}visitDropType(e){this.append("drop type "),e.ifExists&&this.append("if exists "),this.visitNode(e.name)}visitExplain(e){this.append("explain"),(e.options||e.format)&&(this.append(" "),this.append(this.getLeftExplainOptionsWrapper()),e.options&&(this.visitNode(e.options),e.format&&this.append(this.getExplainOptionsDelimiter())),e.format&&(this.append("format"),this.append(this.getExplainOptionAssignment()),this.append(e.format)),this.append(this.getRightExplainOptionsWrapper()))}visitDefaultInsertValue(e){this.append("default")}visitAggregateFunction(e){this.append(e.func),this.append("("),e.distinct&&this.append("distinct "),this.compileList(e.aggregated),this.append(")"),e.filter&&(this.append(" filter("),this.visitNode(e.filter),this.append(")")),e.over&&(this.append(" "),this.visitNode(e.over))}visitOver(e){this.append("over("),e.partitionBy&&(this.visitNode(e.partitionBy),e.orderBy&&this.append(" ")),e.orderBy&&this.visitNode(e.orderBy),this.append(")")}visitPartitionBy(e){this.append("partition by "),this.compileList(e.items)}visitPartitionByItem(e){this.visitNode(e.partitionBy)}visitBinaryOperation(e){this.visitNode(e.leftOperand),this.append(" "),this.visitNode(e.operator),this.append(" "),this.visitNode(e.rightOperand)}visitUnaryOperation(e){this.visitNode(e.operator),this.isMinusOperator(e.operator)||this.append(" "),this.visitNode(e.operand)}isMinusOperator(e){return L.is(e)&&"-"===e.operator}visitUsing(e){this.append("using "),this.compileList(e.tables)}visitFunction(e){this.append(e.func),this.append("("),this.compileList(e.arguments),this.append(")")}visitCase(e){this.append("case"),e.value&&(this.append(" "),this.visitNode(e.value)),e.when&&(this.append(" "),this.compileList(e.when," ")),e.else&&(this.append(" else "),this.visitNode(e.else)),this.append(" end"),e.isStatement&&this.append(" case")}visitWhen(e){this.append("when "),this.visitNode(e.condition),e.result&&(this.append(" then "),this.visitNode(e.result))}append(e){this.#b+=e}appendValue(e){this.addParameter(e),this.append(this.getCurrentParameterPlaceholder())}getLeftIdentifierWrapper(){return'"'}getRightIdentifierWrapper(){return'"'}getCurrentParameterPlaceholder(){return"$"+this.numParameters}getLeftExplainOptionsWrapper(){return"("}getExplainOptionAssignment(){return" "}getExplainOptionsDelimiter(){return", "}getRightExplainOptionsWrapper(){return")"}sanitizeIdentifier(e){const t=this.getLeftIdentifierWrapper(),i=this.getRightIdentifierWrapper();let r="";for(const s of e)r+=s,s===t?r+=t:s===i&&(r+=i);return r}addParameter(e){this.#T.push(e)}appendImmediateValue(e){if(W(e))this.append(`'${e}'`);else if(Q(e)||R(e))this.append(e.toString());else if(V(e))this.append("null");else if(F(e))this.appendImmediateValue(e.toISOString());else{if(!K(e))throw new Error(`invalid immediate value ${e}`);this.appendImmediateValue(e.toString())}}}const Se=e({ForKeyShare:"for key share",ForNoKeyUpdate:"for no key update",ForUpdate:"for update",ForShare:"for share",NoWait:"nowait",SkipLocked:"skip locked",Distinct:"distinct"}),qe=e({InnerJoin:"inner join",LeftJoin:"left join",RightJoin:"right join",FullJoin:"full join",LateralInnerJoin:"inner join lateral",LateralLeftJoin:"left join lateral"}),Me=e({raw:t=>e({sql:t,query:m.createWithSql(t),parameters:e([])})});class DummyDriver{async init(){}async acquireConnection(){return new DummyConnection}async beginTransaction(){}async commitTransaction(){}async rollbackTransaction(){}async releaseConnection(){}async destroy(){}}class DummyConnection{async executeQuery(){return{rows:[]}}async*streamQuery(){}}class DialectAdapterBase{get supportsTransactionalDdl(){return!1}get supportsReturning(){return!1}}class SqliteDriver{#B;#D=new ConnectionMutex;#A;#w;constructor(t){this.#B=e({...t})}async init(){this.#A=B(this.#B.database)?await this.#B.database():this.#B.database,this.#w=new SqliteConnection(this.#A),this.#B.onCreateConnection&&await this.#B.onCreateConnection(this.#w)}async acquireConnection(){return await this.#D.lock(),this.#w}async beginTransaction(e){await e.executeQuery(Me.raw("begin"))}async commitTransaction(e){await e.executeQuery(Me.raw("commit"))}async rollbackTransaction(e){await e.executeQuery(Me.raw("rollback"))}async releaseConnection(){this.#D.unlock()}async destroy(){this.#A?.close()}}class SqliteConnection{#A;constructor(e){this.#A=e}executeQuery(e){const{sql:t,parameters:i}=e,r=this.#A.prepare(t);if(r.reader)return Promise.resolve({rows:r.all(i)});{const{changes:e,lastInsertRowid:t}=r.run(i),s=null!=e?BigInt(e):void 0;return Promise.resolve({numUpdatedOrDeletedRows:s,numAffectedRows:s,insertId:null!=t?BigInt(t):void 0,rows:[]})}}async*streamQuery(){throw new Error("Sqlite driver doesn't support streaming")}}class ConnectionMutex{#E;#I;async lock(){for(;this.#E;)await this.#E;this.#E=new Promise((e=>{this.#I=e}))}unlock(){const e=this.#I;this.#E=void 0,this.#I=void 0,e?.()}}const Pe=/"/g;class SqliteQueryCompiler extends DefaultQueryCompiler{getCurrentParameterPlaceholder(){return"?"}getLeftExplainOptionsWrapper(){return""}getRightExplainOptionsWrapper(){return""}getLeftIdentifierWrapper(){return'"'}getRightIdentifierWrapper(){return'"'}getAutoIncrement(){return"autoincrement"}sanitizeIdentifier(e){return e.replace(Pe,'""')}visitDefaultInsertValue(e){this.append("null")}}class NoopPlugin{transformQuery(e){return e.node}async transformResult(e){return e.result}}const We="kysely_migration",Le="kysely_migration_lock",Qe="migration_lock",Re=e({__noMigrations__:!0});class Migrator{#t;constructor(t){this.#t=e(t)}async getMigrations(){const e=await this.#k(this.#O)?await this.#t.db.withPlugin(this.#S).selectFrom(this.#O).select(["name","timestamp"]).execute():[];return(await this.#q()).map((({name:t,...i})=>{const r=e.find((e=>e.name===t));return{name:t,migration:i,executedAt:r?new Date(r.timestamp):void 0}}))}async migrateToLatest(){return this.#M((({migrations:e})=>e.length-1))}async migrateTo(e){return this.#M((({migrations:t})=>{if(e===Re)return-1;const i=t.findIndex((t=>t.name===e));if(-1===i)throw new Error(`migration "${e}" doesn't exist`);return i}))}async migrateUp(){return this.#M((({currentIndex:e,migrations:t})=>Math.min(e+1,t.length-1)))}async migrateDown(){return this.#M((({currentIndex:e})=>Math.max(e-1,-1)))}async#M(e){try{return await this.#P(),await this.#W(e)}catch(e){return e instanceof MigrationResultSetError?e.resultSet:{error:e}}}get#L(){return this.#t.migrationTableSchema}get#O(){return this.#t.migrationTableName??We}get#Q(){return this.#t.migrationLockTableName??Le}get#S(){return this.#L?new C(this.#L):new NoopPlugin}async#P(){await this.#R(),await this.#_(),await this.#V(),await this.#F()}async#R(){if(this.#L&&!await this.#U())try{await this.#t.db.schema.createSchema(this.#L).ifNotExists().execute()}catch(e){if(!await this.#U())throw e}}async#_(){if(!await this.#k(this.#O))try{this.#L&&await this.#t.db.schema.createSchema(this.#L).ifNotExists().execute(),await this.#t.db.schema.withPlugin(this.#S).createTable(this.#O).ifNotExists().addColumn("name","varchar(255)",(e=>e.notNull().primaryKey())).addColumn("timestamp","varchar(255)",(e=>e.notNull())).execute()}catch(e){if(!await this.#k(this.#O))throw e}}async#V(){if(!await this.#k(this.#Q))try{await this.#t.db.schema.withPlugin(this.#S).createTable(this.#Q).ifNotExists().addColumn("id","varchar(255)",(e=>e.notNull().primaryKey())).addColumn("is_locked","integer",(e=>e.notNull().defaultTo(0))).execute()}catch(e){if(!await this.#k(this.#Q))throw e}}async#F(){if(!await this.#K())try{await this.#t.db.withPlugin(this.#S).insertInto(this.#Q).values({id:Qe,is_locked:0}).execute()}catch(e){if(!await this.#K())throw e}}async#U(){return(await this.#t.db.introspection.getSchemas()).some((e=>e.name===this.#L))}async#k(e){const t=this.#L;return(await this.#t.db.introspection.getTables({withInternalKyselyTables:!0})).some((i=>i.name===e&&(!t||i.schema===t)))}async#K(){return!!await this.#t.db.withPlugin(this.#S).selectFrom(this.#Q).where("id","=",Qe).select("id").executeTakeFirst()}async#W(t){const i=this.#t.db.getExecutor().adapter,r=e({lockTable:this.#t.migrationLockTableName??Le,lockRowId:Qe,lockTableSchema:this.#t.migrationTableSchema}),run=async e=>{try{await i.acquireMigrationLock(e,r);const s=await this.#$(e);if(0===s.migrations.length)return{results:[]};const n=t(s);return void 0===n?{results:[]}:n<s.currentIndex?await this.#j(e,s,n):n>s.currentIndex?await this.#J(e,s,n):{results:[]}}finally{await i.releaseMigrationLock(e,r)}};return i.supportsTransactionalDdl?this.#t.db.transaction().execute(run):this.#t.db.connection().execute(run)}async#$(t){const i=await this.#q(),r=await this.#z(t);return this.#G(i,r),e({migrations:i,currentIndex:i.findIndex((e=>e.name===j(r)))})}async#q(){const e=await this.#t.provider.getMigrations();return Object.keys(e).sort().map((t=>({...e[t],name:t})))}async#z(e){return(await e.withPlugin(this.#S).selectFrom(this.#O).select("name").orderBy("name").execute()).map((e=>e.name))}#G(e,t){for(const i of t)if(!e.some((e=>e.name===i)))throw new Error(`corrupted migrations: previously executed migration ${i} is missing`);for(let i=0;i<t.length;++i)if(e[i].name!==t[i])throw new Error(`corrupted migrations: expected previously executed migration ${t[i]} to be at index ${i} but ${e[i].name} was found in its place. New migrations must always have a name that comes alphabetically after the last executed migration.`)}async#j(e,t,i){const r=[];for(let e=t.currentIndex;e>i;--e)r.push({migrationName:t.migrations[e].name,direction:"Down",status:"NotExecuted"});for(let i=0;i<r.length;++i){const s=t.migrations.find((e=>e.name===r[i].migrationName));try{s.down&&(await s.down(e),await e.withPlugin(this.#S).deleteFrom(this.#O).where("name","=",s.name).execute(),r[i]={migrationName:s.name,direction:"Down",status:"Success"})}catch(e){throw r[i]={migrationName:s.name,direction:"Down",status:"Error"},new MigrationResultSetError({error:e,results:r})}}return{results:r}}async#J(e,t,i){const r=[];for(let e=t.currentIndex+1;e<=i;++e)r.push({migrationName:t.migrations[e].name,direction:"Up",status:"NotExecuted"});for(let i=0;i<r.length;++i){const s=t.migrations.find((e=>e.name===r[i].migrationName));try{await s.up(e),await e.withPlugin(this.#S).insertInto(this.#O).values({name:s.name,timestamp:(new Date).toISOString()}).execute(),r[i]={migrationName:s.name,direction:"Up",status:"Success"}}catch(e){throw r[i]={migrationName:s.name,direction:"Up",status:"Error"},new MigrationResultSetError({error:e,results:r})}}return{results:r}}}class MigrationResultSetError extends Error{#H;constructor(e){super(),this.#H=e}get resultSet(){return this.#H}}class SqliteIntrospector{#A;constructor(e){this.#A=e}async getSchemas(){return[]}async getTables(e={withInternalKyselyTables:!1}){let t=this.#A.selectFrom("sqlite_schema").where("type","in",["table","view"]).where("name","not like","sqlite_%").select("name").orderBy("name").$castTo();e.withInternalKyselyTables||(t=t.where("name","!=",We).where("name","!=",Le));const i=await t.execute();return Promise.all(i.map((({name:e})=>this.#Y(e))))}async getMetadata(e){return{tables:await this.getTables(e)}}async#Y(e){const t=this.#A,i=await t.selectFrom("sqlite_master").where("name","=",e).select(["sql","type"]).$castTo().executeTakeFirstOrThrow(),r=i.sql?.split(/[\(\),]/)?.find((e=>e.toLowerCase().includes("autoincrement")))?.trimStart()?.split(/\s+/)?.[0]?.replace(/["`]/g,""),s=await t.selectFrom(J`pragma_table_info(${e})`.as("table_info")).select(["name","type","notnull","dflt_value"]).orderBy("cid").execute();return{name:e,isView:"view"===i.type,columns:s.map((e=>({name:e.name,dataType:e.type,isNullable:!e.notnull,isAutoIncrementing:e.name===r,hasDefaultValue:null!=e.dflt_value})))}}}class SqliteAdapter{get supportsTransactionalDdl(){return!1}get supportsReturning(){return!0}async acquireMigrationLock(){}async releaseMigrationLock(){}}class SqliteDialect{#B;constructor(t){this.#B=e({...t})}createDriver(){return new SqliteDriver(this.#B)}createQueryCompiler(){return new SqliteQueryCompiler}createAdapter(){return new SqliteAdapter}createIntrospector(e){return new SqliteIntrospector(e)}}const _e=/"/g;class PostgresQueryCompiler extends DefaultQueryCompiler{sanitizeIdentifier(e){return e.replace(_e,'""')}}class PostgresIntrospector{#A;constructor(e){this.#A=e}async getSchemas(){return(await this.#A.selectFrom("pg_catalog.pg_namespace").select("nspname").$castTo().execute()).map((e=>({name:e.nspname})))}async getTables(e={withInternalKyselyTables:!1}){let t=this.#A.selectFrom("pg_catalog.pg_attribute as a").innerJoin("pg_catalog.pg_class as c","a.attrelid","c.oid").innerJoin("pg_catalog.pg_namespace as ns","c.relnamespace","ns.oid").innerJoin("pg_catalog.pg_type as typ","a.atttypid","typ.oid").innerJoin("pg_catalog.pg_namespace as dtns","typ.typnamespace","dtns.oid").select(["a.attname as column","a.attnotnull as not_null","a.atthasdef as has_default","c.relname as table","c.relkind as table_type","ns.nspname as schema","typ.typname as type","dtns.nspname as type_schema",this.#A.selectFrom("pg_class").select(J`true`.as("auto_incrementing")).whereRef("relnamespace","=","c.relnamespace").where("relkind","=","S").where("relname","=",J`c.relname || '_' || a.attname || '_seq'`).as("auto_incrementing")]).where((({cmpr:e,or:t})=>t([e("c.relkind","=","r"),e("c.relkind","=","v")]))).where("ns.nspname","!~","^pg_").where("ns.nspname","!=","information_schema").where("a.attnum",">=",0).where("a.attisdropped","!=",!0).orderBy("ns.nspname").orderBy("c.relname").orderBy("a.attnum").$castTo();e.withInternalKyselyTables||(t=t.where("c.relname","!=",We).where("c.relname","!=",Le));const i=await t.execute();return this.#X(i)}async getMetadata(e){return{tables:await this.getTables(e)}}#X(t){return t.reduce(((t,i)=>{let r=t.find((e=>e.name===i.table&&e.schema===i.schema));return r||(r=e({name:i.table,isView:"v"===i.table_type,schema:i.schema,columns:[]}),t.push(r)),r.columns.push(e({name:i.column,dataType:i.type,dataTypeSchema:i.type_schema,isNullable:!i.not_null,isAutoIncrementing:!!i.auto_incrementing,hasDefaultValue:i.has_default})),t}),[])}}const Ve=BigInt("3853314791062309107");class PostgresAdapter extends DialectAdapterBase{get supportsTransactionalDdl(){return!0}get supportsReturning(){return!0}async acquireMigrationLock(e){await J`select pg_advisory_xact_lock(${J.lit(Ve)})`.execute(e)}async releaseMigrationLock(){}}function extendStackTrace(e,t){if(function isStackHolder(e){return D(e)&&W(e.stack)}(e)&&t.stack){const i=t.stack.split("\n").slice(1).join("\n");return e.stack+=`\n${i}`,e}return e}const Fe=Symbol();class MysqlDriver{#B;#c=new WeakMap;#Z;constructor(t){this.#B=e({...t})}async init(){this.#Z=B(this.#B.pool)?await this.#B.pool():this.#B.pool}async acquireConnection(){const e=await this.#ee();let t=this.#c.get(e);return t||(t=new MysqlConnection(e),this.#c.set(e,t),this.#B?.onCreateConnection&&await this.#B.onCreateConnection(t)),t}async#ee(){return new Promise(((e,t)=>{this.#Z.getConnection((async(i,r)=>{i?t(i):e(r)}))}))}async beginTransaction(e,t){t.isolationLevel&&await e.executeQuery(Me.raw(`set transaction isolation level ${t.isolationLevel}`)),await e.executeQuery(Me.raw("begin"))}async commitTransaction(e){await e.executeQuery(Me.raw("commit"))}async rollbackTransaction(e){await e.executeQuery(Me.raw("rollback"))}async releaseConnection(e){e[Fe]()}async destroy(){return new Promise(((e,t)=>{this.#Z.end((i=>{i?t(i):e()}))}))}}class MysqlConnection{#te;constructor(e){this.#te=e}async executeQuery(e){try{const t=await this.#ie(e);if(function isOkPacket(e){return D(e)&&"insertId"in e&&"affectedRows"in e}(t)){const{insertId:e,affectedRows:i}=t,r=null!=i?BigInt(i):void 0;return{insertId:null!=e&&"0"!==e.toString()?BigInt(e):void 0,numUpdatedOrDeletedRows:r,numAffectedRows:r,rows:[]}}return Array.isArray(t)?{rows:t}:{rows:[]}}catch(e){throw extendStackTrace(e,new Error)}}#ie(e){return new Promise(((t,i)=>{this.#te.query(e.sql,e.parameters,((e,r)=>{e?i(e):t(r)}))}))}async*streamQuery(e,t){const i=this.#te.query(e.sql,e.parameters).stream({objectMode:!0});try{for await(const e of i)yield{rows:[e]}}catch(e){if(e&&"object"==typeof e&&"code"in e&&"ERR_STREAM_PREMATURE_CLOSE"===e.code)return;throw e}}[Fe](){this.#te.release()}}const Ue=/`/g;class MysqlQueryCompiler extends DefaultQueryCompiler{getCurrentParameterPlaceholder(){return"?"}getLeftExplainOptionsWrapper(){return""}getExplainOptionAssignment(){return"="}getExplainOptionsDelimiter(){return" "}getRightExplainOptionsWrapper(){return""}getLeftIdentifierWrapper(){return"`"}getRightIdentifierWrapper(){return"`"}sanitizeIdentifier(e){return e.replace(Ue,"``")}}class MysqlIntrospector{#A;constructor(e){this.#A=e}async getSchemas(){return(await this.#A.selectFrom("information_schema.schemata").select("schema_name").$castTo().execute()).map((e=>({name:e.SCHEMA_NAME})))}async getTables(e={withInternalKyselyTables:!1}){let t=this.#A.selectFrom("information_schema.columns as columns").innerJoin("information_schema.tables as tables",(e=>e.onRef("columns.TABLE_CATALOG","=","tables.TABLE_CATALOG").onRef("columns.TABLE_SCHEMA","=","tables.TABLE_SCHEMA").onRef("columns.TABLE_NAME","=","tables.TABLE_NAME"))).select(["columns.COLUMN_NAME","columns.COLUMN_DEFAULT","columns.TABLE_NAME","columns.TABLE_SCHEMA","tables.TABLE_TYPE","columns.IS_NULLABLE","columns.DATA_TYPE","columns.EXTRA"]).where("columns.TABLE_SCHEMA","=",J`database()`).orderBy("columns.TABLE_NAME").orderBy("columns.ORDINAL_POSITION").$castTo();e.withInternalKyselyTables||(t=t.where("columns.TABLE_NAME","!=",We).where("columns.TABLE_NAME","!=",Le));const i=await t.execute();return this.#X(i)}async getMetadata(e){return{tables:await this.getTables(e)}}#X(t){return t.reduce(((t,i)=>{let r=t.find((e=>e.name===i.TABLE_NAME));return r||(r=e({name:i.TABLE_NAME,isView:"VIEW"===i.TABLE_TYPE,schema:i.TABLE_SCHEMA,columns:[]}),t.push(r)),r.columns.push(e({name:i.COLUMN_NAME,dataType:i.DATA_TYPE,isNullable:"YES"===i.IS_NULLABLE,isAutoIncrementing:i.EXTRA.toLowerCase().includes("auto_increment"),hasDefaultValue:null!==i.COLUMN_DEFAULT})),t}),[])}}const Ke="ea586330-2c93-47c8-908d-981d9d270f9d";class MysqlAdapter extends DialectAdapterBase{get supportsTransactionalDdl(){return!1}get supportsReturning(){return!1}async acquireMigrationLock(e){await J`select get_lock(${J.lit(Ke)}, ${J.lit(3600)})`.execute(e)}async releaseMigrationLock(e){await J`select release_lock(${J.lit(Ke)})`.execute(e)}}class MysqlDialect{#B;constructor(e){this.#B=e}createDriver(){return new MysqlDriver(this.#B)}createQueryCompiler(){return new MysqlQueryCompiler}createAdapter(){return new MysqlAdapter}createIntrospector(e){return new MysqlIntrospector(e)}}const $e=Symbol();class PostgresDriver{#B;#c=new WeakMap;#Z;constructor(t){this.#B=e({...t})}async init(){this.#Z=B(this.#B.pool)?await this.#B.pool():this.#B.pool}async acquireConnection(){const e=await this.#Z.connect();let t=this.#c.get(e);return t||(t=new PostgresConnection(e,{cursor:this.#B.cursor??null}),this.#c.set(e,t),this.#B?.onCreateConnection&&await this.#B.onCreateConnection(t)),t}async beginTransaction(e,t){t.isolationLevel?await e.executeQuery(Me.raw(`start transaction isolation level ${t.isolationLevel}`)):await e.executeQuery(Me.raw("begin"))}async commitTransaction(e){await e.executeQuery(Me.raw("commit"))}async rollbackTransaction(e){await e.executeQuery(Me.raw("rollback"))}async releaseConnection(e){e[$e]()}async destroy(){if(this.#Z){const e=this.#Z;this.#Z=void 0,await e.end()}}}class PostgresConnection{#re;#se;constructor(e,t){this.#re=e,this.#se=t}async executeQuery(e){try{const t=await this.#re.query(e.sql,[...e.parameters]);if("INSERT"===t.command||"UPDATE"===t.command||"DELETE"===t.command){const e=BigInt(t.rowCount);return{numUpdatedOrDeletedRows:e,numAffectedRows:e,rows:t.rows??[]}}return{rows:t.rows??[]}}catch(e){throw extendStackTrace(e,new Error)}}async*streamQuery(e,t){if(!this.#se.cursor)throw new Error("'cursor' is not present in your postgres dialect config. It's required to make streaming work in postgres.");if(!Number.isInteger(t)||t<=0)throw new Error("chunkSize must be a positive integer");const i=this.#re.query(new this.#se.cursor(e.sql,e.parameters.slice()));try{for(;;){const e=await i.read(t);if(0===e.length)break;yield{rows:e}}}finally{await i.close()}}[$e](){this.#re.release()}}class PostgresDialect{#B;constructor(e){this.#B=e}createDriver(){return new PostgresDriver(this.#B)}createQueryCompiler(){return new PostgresQueryCompiler}createAdapter(){return new PostgresAdapter}createIntrospector(e){return new PostgresIntrospector(e)}}class FileMigrationProvider{#t;constructor(e){this.#t=e}async getMigrations(){const e={},t=await this.#t.fs.readdir(this.#t.migrationFolder);for(const i of t)if(i.endsWith(".js")||i.endsWith(".ts")&&!i.endsWith(".d.ts")||i.endsWith(".mjs")||i.endsWith(".mts")&&!i.endsWith(".d.mts")){const t=await import(this.#t.path.join(this.#t.migrationFolder,i)),r=i.substring(0,i.lastIndexOf("."));isMigration(t?.default)?e[r]=t.default:isMigration(t)&&(e[r]=t)}return e}}function isMigration(e){return D(e)&&B(e.up)}class SnakeCaseTransformer extends u{#ne;constructor(e){super(),this.#ne=e}transformIdentifier(e){return e=super.transformIdentifier(e),{...e,name:this.#ne(e.name)}}}function isDigit(e){return e>="0"&&e<="9"}function memoize(e){const t=new Map;return i=>{let r=t.get(i);return r||(r=e(i),t.set(i,r)),r}}class CamelCasePlugin{opt;#oe;#ne;#ae;constructor(e={}){this.opt=e,this.#oe=function createCamelCaseMapper({upperCase:e=!1}={}){return memoize((t=>{if(0===t.length)return t;e&&function isAllUpperCaseSnakeCase(e){for(let t=1,i=e.length;t<i;++t){const i=e[t];if("_"!==i&&i!==i.toUpperCase())return!1}return!0}(t)&&(t=t.toLowerCase());let i=t[0];for(let e=1,r=t.length;e<r;++e){const r=t[e],s=t[e-1];"_"!==r&&(i+="_"===s?r.toUpperCase():r)}return i}))}(e),this.#ne=function createSnakeCaseMapper({upperCase:e=!1,underscoreBeforeDigits:t=!1,underscoreBetweenUppercaseLetters:i=!1}={}){return memoize((r=>{if(0===r.length)return r;const s=r.toUpperCase(),n=r.toLowerCase();let o=n[0];for(let e=1,a=r.length;e<a;++e){const a=r[e],d=r[e-1],p=s[e],l=s[e-1],c=n[e],u=n[e-1];t&&isDigit(a)&&!isDigit(d)?o+="_"+a:o+=a===p&&p!==c?i||d!==l||l===u?"_"+c:c:a}return e?o.toUpperCase():o}))}(e),this.#ae=new SnakeCaseTransformer(this.snakeCase.bind(this))}transformQuery(e){return this.#ae.transformNode(e.node)}async transformResult(e){return e.result.rows&&Array.isArray(e.result.rows)?{...e.result,rows:e.result.rows.map((e=>this.mapRow(e)))}:e.result}mapRow(e){return Object.keys(e).reduce(((t,i)=>{let r=e[i];return Array.isArray(r)?r=r.map((e=>canMap(e,this.opt)?this.mapRow(e):e)):canMap(r,this.opt)&&(r=this.mapRow(r)),t[this.camelCase(i)]=r,t}),{})}snakeCase(e){return this.#ne(e)}camelCase(e){return this.#oe(e)}}function canMap(e,t){return D(e)&&!F(e)&&!z(e)&&!G(e)&&!t?.maintainNestedObjectKeys}class DeduplicateJoinsTransformer extends u{transformSelectQuery(e){return this.#de(super.transformSelectQuery(e))}transformUpdateQuery(e){return this.#de(super.transformUpdateQuery(e))}transformDeleteQuery(e){return this.#de(super.transformDeleteQuery(e))}#de(t){return t.joins&&0!==t.joins.length?e({...t,joins:this.#pe(t.joins)}):t}#pe(t){const i=[];for(let e=0;e<t.length;++e){let r=!1;for(let i=e+1;i<t.length;++i)if(H(t[e],t[i])){r=!0;break}r||i.push(t[e])}return e(i)}}class DeduplicateJoinsPlugin{#i=new DeduplicateJoinsTransformer;transformQuery(e){return this.#i.transformNode(e.node)}transformResult(e){return Promise.resolve(e.result)}}const je=e({is:e=>"ListNode"===e.kind,create:t=>e({kind:"ListNode",items:e(t)})});export{pe as AddColumnNode,xe as AddConstraintNode,AlterColumnBuilder,le as AlterColumnNode,AlterTableBuilder,AlterTableColumnAlteringBuilder,ee as AlterTableNode,AlteredColumnBuilder,CamelCasePlugin,E as CaseBuilder,I as CaseNode,me as CheckConstraintNode,ColumnDefinitionBuilder,ce as ColumnDefinitionNode,r as ColumnNode,Me as CompiledQuery,ConnectionBuilder,CreateIndexBuilder,te as CreateIndexNode,CreateSchemaBuilder,ie as CreateSchemaNode,CreateTableBuilder,se as CreateTableNode,CreateTypeBuilder,Ee as CreateTypeNode,CreateViewBuilder,De as CreateViewNode,Le as DEFAULT_MIGRATION_LOCK_TABLE,We as DEFAULT_MIGRATION_TABLE,ve as DataTypeNode,DeduplicateJoinsPlugin,DefaultConnectionProvider,DefaultQueryCompiler,DefaultQueryExecutor,fe as DefaultValueNode,DialectAdapterBase,ue as DropColumnNode,Te as DropConstraintNode,DropIndexBuilder,ne as DropIndexNode,DropSchemaBuilder,oe as DropSchemaNode,DropTableBuilder,de as DropTableNode,DropTypeBuilder,Ie as DropTypeNode,DropViewBuilder,Ae as DropViewNode,DummyDriver,DynamicModule,FileMigrationProvider,ForeignKeyConstraintBuilder,Ce as ForeignKeyConstraintNode,we as GeneratedNode,t as IdentifierNode,q as InsertQueryNode,Kysely,Oe as LOG_LEVELS,je as ListNode,Log,Qe as MIGRATION_LOCK_ID,Migrator,Ne as ModifyColumnNode,MysqlAdapter,MysqlDialect,MysqlDriver,MysqlIntrospector,MysqlQueryCompiler,Re as NO_MIGRATIONS,re as ON_COMMIT_ACTIONS,ye as ON_MODIFY_FOREIGN_ACTIONS,u as OperationNodeTransformer,OperationNodeVisitor,L as OperatorNode,PostgresAdapter,PostgresDialect,PostgresDriver,PostgresIntrospector,PostgresQueryCompiler,Be as PrimaryConstraintNode,A as QueryCreator,y as QueryNode,m as RawNode,d as ReferenceNode,ge as ReferencesNode,he as RenameColumnNode,SchemaModule,p as SelectAllNode,M as SetOperationNode,SingleConnectionProvider,SqliteAdapter,SqliteDialect,SqliteDriver,SqliteIntrospector,SqliteQueryCompiler,ke as TRANSACTION_ISOLATION_LEVELS,Transaction,TransactionBuilder,be as UniqueConstraintNode,f as ValueListNode,n as ValueNode,C as WithSchemaPlugin,S as createFunctionModule,isCompilable,isKyselyProps,s as isOperationNodeSource,J as sql};
